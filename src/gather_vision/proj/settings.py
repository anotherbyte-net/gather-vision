"""
Django settings for gather_vision project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from importlib.resources import path
from django.utils.translation import gettext_lazy as _
from gather_vision.proj import DjangoCustomSettings

# Check the deployment checklist
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

with path("gather_vision.proj", "settings.py") as p:
    # Build paths inside the project like this: BASE_DIR / 'subdir'.
    BASE_DIR = p.parent.parent

# Load settings from a config file
env = DjangoCustomSettings(prefix="GATHER_VISION")
env.load_file(BASE_DIR / ".local" / ".env")
env.load_env(name="ENV_PATH")

# Set debug or default to false.
DEBUG = env.get_bool(key="DEBUG", default=False)

# secret key
SECRET_KEY = env.get_str(key="SECRET_KEY")

# allowed hosts
ALLOWED_HOSTS = env.get_list(key="ALLOWED_HOSTS", default=[])

# internal ips
INTERNAL_IPS = env.get_list(key="INTERNAL_IPS", default=["127.0.0.1"])

# Application definition

INSTALLED_APPS = [
    "django.contrib.admindocs",
    "django.contrib.admin.apps.SimpleAdminConfig",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

if DEBUG is True:
    INSTALLED_APPS.append("debug_toolbar")


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

if DEBUG is True:
    MIDDLEWARE.insert(
        MIDDLEWARE.index("django.middleware.csrf.CsrfViewMiddleware"),
        "debug_toolbar",
    )


ROOT_URLCONF = "gather_vision.proj.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / "templates",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "gather_vision.proj.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / ".local" / "gather_vision.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

_auth_pw_validators = "django.contrib.auth.password_validation"
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": f"{_auth_pw_validators}.UserAttributeSimilarityValidator",
    },
    {
        "NAME": f"{_auth_pw_validators}.MinimumLengthValidator",
    },
    {
        "NAME": f"{_auth_pw_validators}.CommonPasswordValidator",
    },
    {
        "NAME": f"{_auth_pw_validators}.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = env.get_str(key="LANGUAGE_CODE", default="en-au")
LANGUAGES = [
    ("en", _("English")),
]

TIME_ZONE = env.get_str(key="TIME_ZONE", default="UTC")

USE_I18N = env.get_bool(key="USE_I18N", default=True)

USE_TZ = env.get_bool(key="USE_TZ", default=True)


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = env.get_str(key="STATIC_URL", default="static/")
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# caches
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.db.DatabaseCache",
        "LOCATION": env.get_str(key="CACHE_TABLE_NAME", default="django_cache_items"),
    },
}

# Custom user model
# https://docs.djangoproject.com/en/4.2/topics/auth/customizing/#using-a-custom-user-model-when-starting-a-project
AUTH_USER_MODEL = "explore.CustomUser"

# logging
LOGGING_LEVEL = env.get_str(key="LOG_LEVEL", default="INFO")
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "gather_vision.console.verbose": {
            "format": "{asctime} [{name}] [{levelname}] "
            "[{process:d}:{thread:d}] {message}",
            "style": "{",
        },
        "gather_vision.console.basic": {
            "format": "{asctime} [{levelname:8}] {message}",
            "style": "{",
        },
    },
    "handlers": {
        "gather_vision.console": {
            "level": LOGGING_LEVEL,
            "class": "logging.StreamHandler",
            "formatter": "gather_vision.console.basic",
        },
    },
    "root": {
        "handlers": ["gather_vision.console"],
        "level": LOGGING_LEVEL,
    },
    "loggers": {
        "gather_vision": {
            "handlers": ["gather_vision.console"],
            "level": LOGGING_LEVEL,
        },
        "": {
            "handlers": ["gather_vision.console"],
            "level": LOGGING_LEVEL,
            "propagate": True,
        },
    },
}
