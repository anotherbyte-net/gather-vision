name: App Tests

on:
  push:
    branches:
      - main

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        python-version:
          - '3.9'
          - '3.10'
        poetry-version:
          - '1.1.12'
    steps:
      # These steps are trying to keep the Python package and the testing tools separate.
      # This way, the dev tools won't conflict with the package dependencies.
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          # this caches the pip global cache
          cache: 'pip'
          cache-dependency-path: '**/poetry.lock'

      - name: Cache Python virtual environment
        uses: actions/cache@v2
        with:
          path: |
            .venv
          key: python-venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            python-venv-${{ runner.os }}-${{ matrix.python-version }}
            python-venv-${{ runner.os }}
            python-venv

      - name: Cache Python Poetry
        uses: actions/cache@v2
        with:
          path: |
            ~/.local/bin
            ~/.cache/pypoetry
          key: python-poetry-${{ runner.os }}-${{ matrix.python-version }}
          restore-keys: |
            python-poetry-${{ runner.os }}
            python-poetry

      - name: Install Python Poetry
        run: |
          if [[ ! -d ~/.local/bin ]]; then
            curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py | python -
          fi
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Create and populate Python virtual environment
        run: |
          if [[ ! -d $PWD/.venv ]]; then
            python -m venv $PWD/.venv
          fi
          poetry config virtualenvs.in-project true
          poetry run python -m pip install --upgrade pip setuptools wheel
          poetry install --remove-untracked

      - name: Run Django tests with coverage
        run: |
          poetry run coverage run -m pytest --junitxml=test-results/test-${{ matrix.python-version }}.xml
          poetry run coverage report
          poetry run coverage html --directory htmlcov/coverage-${{ matrix.python-version }}

      - name: Run Python linters
        run: |
          poetry run flake8 . --count --show-source --statistics
          poetry run black --check .

      - name: Upload test results
        uses: actions/upload-artifact@v2
        with:
          name: test-${{ matrix.python-version }}
          path: |
            test-results/test-${{ matrix.python-version }}.xml
            htmlcov/coverage-${{ matrix.python-version }}/
        if: ${{ always() }}
