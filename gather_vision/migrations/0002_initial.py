# Generated by Django 3.2.9 on 2021-11-28 14:24

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('gather_vision', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='InformationSource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, help_text='The date this item was created.')),
                ('modified_date', models.DateTimeField(auto_now=True, help_text='The date this item was last changed.')),
                ('name', models.SlugField(help_text='The name of the information source.', unique=True)),
                ('title', models.CharField(help_text='The displayed title.', max_length=100)),
                ('info_url', models.URLField(blank=True, help_text='A link to details about the information source.')),
            ],
            options={
                'ordering': ['modified_date'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PlaylistTrackSource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, help_text='The date this item was created.')),
                ('modified_date', models.DateTimeField(auto_now=True, help_text='The date this item was last changed.')),
                ('name', models.CharField(help_text='The name of the music source.', max_length=50, unique=True)),
                ('title', models.CharField(help_text='The displayed title of the track source.', max_length=100)),
                ('info_url', models.URLField(blank=True, help_text='A link to information about the track source.')),
            ],
            options={
                'ordering': ['modified_date'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TransportLine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, help_text='The date this item was created.')),
                ('modified_date', models.DateTimeField(auto_now=True, help_text='The date this item was last changed.')),
                ('title', models.CharField(help_text='The displayed title of the transport network line.', max_length=100)),
            ],
            options={
                'ordering': ['modified_date'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TransportItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, help_text='The date this item was created.')),
                ('modified_date', models.DateTimeField(auto_now=True, help_text='The date this item was last changed.')),
                ('title', models.CharField(help_text='The title of the transport notice.', max_length=200)),
                ('body', models.TextField(help_text='The text of the transport notice.')),
                ('start_date', models.DateField(blank=True, help_text='The start date of this transport notice.', null=True)),
                ('stop_date', models.DateField(blank=True, help_text='The finish date this transport notice.', null=True)),
                ('is_train', models.BooleanField(help_text='Whether the transport notice includes train services.')),
                ('view_url', models.URLField(blank=True, help_text='The url to view the transport notice.')),
                ('notice_type', models.CharField(blank=True, help_text='The type of the transport notice.', max_length=200)),
                ('category', models.CharField(blank=True, help_text='The category of the transport notice.', max_length=200)),
                ('severity', models.CharField(blank=True, help_text='The severity of the transport notice.', max_length=200)),
                ('timing', models.CharField(blank=True, help_text='The timing of the transport notice.', max_length=200)),
                ('location', models.CharField(blank=True, help_text='The location covered by the transport notice.', max_length=500)),
                ('lines', models.ManyToManyField(help_text='The lines involved in this transport notice.', related_name='notices', to='gather_vision.TransportLine')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transport_items', to='gather_vision.informationsource')),
            ],
            options={
                'ordering': ['modified_date'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PlaylistTrack',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, help_text='The date this item was created.')),
                ('modified_date', models.DateTimeField(auto_now=True, help_text='The date this item was last changed.')),
                ('code', models.CharField(help_text='The unique code assigned to this track by the music source.', max_length=100)),
                ('title', models.CharField(help_text='The title of the track.', max_length=500)),
                ('artists', models.CharField(help_text='The artists for the track.', max_length=800)),
                ('info_url', models.URLField(blank=True, help_text='A link to the information provided by the source about the track.')),
                ('image_url', models.URLField(blank=True, help_text='A link to the art for the track cover.')),
                ('musicbrainz_code', models.UUIDField(blank=True, help_text='The MusicBrainz recording id for this track.', null=True)),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tracks', to='gather_vision.playlisttracksource')),
            ],
        ),
        migrations.CreateModel(
            name='PlaylistItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, help_text='The date this item was created.')),
                ('modified_date', models.DateTimeField(auto_now=True, help_text='The date this item was last changed.')),
                ('retrieved_date', models.DateTimeField(help_text='The date and time this playlist was retrieved.')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='playlists', to='gather_vision.informationsource')),
            ],
            options={
                'ordering': ['modified_date'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PlaylistEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, help_text='The date this item was created.')),
                ('modified_date', models.DateTimeField(auto_now=True, help_text='The date this item was last changed.')),
                ('position_change', models.IntegerField(blank=True, help_text='The position change of this entry compared to the previously generated playlist.', null=True)),
                ('order', models.PositiveIntegerField(help_text='The order of this entry in the playlist.')),
                ('playlist', models.ForeignKey(help_text='The playlist that contains this entry.', on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='gather_vision.playlistitem')),
                ('tracks', models.ManyToManyField(help_text='The tracks that match this playlist entry.', related_name='entries', to='gather_vision.PlaylistTrack')),
            ],
            options={
                'verbose_name_plural': 'Playlist entries',
            },
        ),
        migrations.CreateModel(
            name='PetitionItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, help_text='The date this item was created.')),
                ('modified_date', models.DateTimeField(auto_now=True, help_text='The date this item was last changed.')),
                ('title', models.CharField(help_text='The title of the petition.', max_length=1000)),
                ('code', models.CharField(help_text='The petition reference code.', max_length=50)),
                ('view_url', models.URLField(help_text='The url to the petition.')),
                ('principal', models.CharField(help_text='The name (and address) of the principal petitioner.', max_length=300)),
                ('sponsor', models.CharField(help_text='The name of the sponsor of the petition.', max_length=100)),
                ('eligibility', models.CharField(help_text='The eligibility to sign the petition.', max_length=100)),
                ('body', models.TextField(help_text='The text of the petition.')),
                ('opened_date', models.DateField(blank=True, help_text='The date this petition opened.', null=True)),
                ('closed_date', models.DateField(help_text='The date this petition closed.')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='petitions', to='gather_vision.informationsource')),
            ],
        ),
        migrations.CreateModel(
            name='PetitionChange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, help_text='The date this item was created.')),
                ('modified_date', models.DateTimeField(auto_now=True, help_text='The date this item was last changed.')),
                ('retrieved_date', models.DateTimeField(help_text='The date this petition update was retrieved.')),
                ('signatures', models.PositiveIntegerField(help_text='The number of signatures.')),
                ('petition', models.ForeignKey(help_text='The petition.', on_delete=django.db.models.deletion.CASCADE, related_name='signature_changes', to='gather_vision.petitionitem')),
            ],
            options={
                'ordering': ['modified_date'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OutageItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, help_text='The date this item was created.')),
                ('modified_date', models.DateTimeField(auto_now=True, help_text='The date this item was last changed.')),
                ('event_name', models.CharField(help_text='The name of the outage event.', max_length=500)),
                ('council', models.CharField(help_text='The name of the council that covers the outage location.', max_length=500)),
                ('suburb', models.CharField(help_text='The name of the suburb that covers the outage location.', max_length=500)),
                ('post_code', models.CharField(help_text='The location post code.', max_length=4)),
                ('cause', models.CharField(help_text='The cause of the outage.', max_length=500)),
                ('streets', models.CharField(help_text='The name of the streets involved in the outage.', max_length=4)),
                ('restored_date', models.DateTimeField(help_text='The date this outage ended.')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outages', to='gather_vision.informationsource')),
            ],
            options={
                'ordering': ['modified_date'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OutageChange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, help_text='The date this item was created.')),
                ('modified_date', models.DateTimeField(auto_now=True, help_text='The date this item was last changed.')),
                ('customers', models.PositiveIntegerField(help_text='The number of customers affected.')),
                ('retrieved_date', models.DateTimeField(help_text='The date this outage update was retrieved.')),
                ('outage', models.ForeignKey(help_text='The outage.', on_delete=django.db.models.deletion.CASCADE, related_name='customer_changes', to='gather_vision.outageitem')),
            ],
            options={
                'ordering': ['modified_date'],
                'abstract': False,
            },
        ),
        migrations.AddConstraint(
            model_name='playlisttrack',
            constraint=models.UniqueConstraint(fields=('source', 'code'), name='music_track_unique_source_code'),
        ),
        migrations.AddConstraint(
            model_name='playlistentry',
            constraint=models.UniqueConstraint(fields=('playlist', 'order'), name='playlist_entry_unique_playlist_order'),
        ),
    ]
